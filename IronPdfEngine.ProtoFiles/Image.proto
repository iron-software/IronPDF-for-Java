syntax = "proto3";
import "PdfDocument.proto";
import "Basic.proto";
import "Render.proto";

package IronPdfEngine.Proto;

option java_package = "com.ironsoftware.ironpdf.internal.proto";
option java_multiple_files = true;

message ImageBehavior{
  int32 enum_value = 1;
}

message ImageType{
  int32 enum_value = 1;
}

message DrawBitmapRequestStream{
  oneof request {
    Info info = 1;
    bytes raw_image_chunk = 2;
  }
  message Info{
    PdfDocument document = 1;
    repeated int32 page_indexes = 2 ;
    double x = 3; //different API: this will draw at same x,y for every page
    double y = 4;
    double desired_width = 5;
    double desired_height = 6;
    optional PixelFormat pixelFormat = 7;
  }
}

message PixelFormat{
  int32 enum_value = 1;
}

message ExtractAllRawImagesRequest{
  PdfDocument document = 1;
  repeated int32 page_indexes = 2; // null/empty for all pages
}

message ImagesResultStream{
  oneof result_or_exception {
    RawImageChunkWithIndex raw_images_chunk = 1;
    RemoteException exception = 2;
  }
}

message ImageResultStream{
  oneof result_or_exception {
    bytes raw_image_chunk = 1;
    RemoteException exception = 2;
  }
}

//this will contain a part of image data with index of the image.
//for using this message, you must combine raw_image_chunk with another raw_image_chunk with the same index
message RawImageChunkWithIndex{
  int32 image_index = 1;
  bytes raw_image_chunk = 2;
}

message PdfToImagesRequest{
  PdfDocument document = 1;
  repeated int32 page_indexes = 2; // null/empty for all pages
  optional int32 dpi = 3;
  optional int32 max_width = 4;
  optional int32 max_height = 5;
}

message PdfToMultiPageTiffImageRequest{
  PdfDocument document = 1;
  repeated int32 page_indexes = 2; // null/empty for all pages
  optional int32 dpi = 3;
  optional int32 max_width = 4;
  optional int32 max_height = 5;
}

message ImageToPdfRequestStream{
  oneof request {
    Info info = 1;
    RawImageChunkWithIndex raw_images_chunk = 2;
  }
  message Info{
    ImageBehavior image_behavior = 1;
    optional ChromePdfRenderOptions render_options = 2;
  }
}

message RawImageChunkWithIndexAndFileType{
  int32 image_index = 1;
  bytes raw_image_chunk = 2;
  string file_type = 3;
}

message ImageFilesToPdfRequestStream{
  oneof request {
    Info info = 1;
    RawImageChunkWithIndexAndFileType raw_images_file_chunk = 2;
  }
  message Info{
    ImageBehavior image_behavior = 1;
    optional ChromePdfRenderOptions render_options = 2;
  }
}